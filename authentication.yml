openapi: '3.0.3'
info:
  title: KeyWarden
  version: '0.11.0'
servers:
  - url: https://api.server.test/v1
tags:
  - name: 'auth'
  - name: 'admin'
  - name: 'profile'
  - name: 'passwordResetToken'

paths:
  /api/auth/signup:
    post:
      tags:
        - 'auth'
      summary: 'Register new user'
      description: 'Check if there is an existing user and save a new one to database'
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupForm'
      responses:
        '201':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/signin:
    post:
      tags:
        - 'auth'
      summary: 'User login'
      description: 'Authenticate {username, password} and generate a JWT'
      operationId: signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninForm'
      responses:
        '200':
          description: 'Authenticated successfully!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/forgotpassword:
    post:
      tags:
        - 'passwordResetToken'
      summary: 'Send user an email with url/{token} to update his forgotten password'
      description: 'Access enabled to any role'
      operationId: emailPasswordResetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    
  /api/auth/forgotpassword/{token}:  
    patch:
      tags:
        - 'passwordResetToken'
      summary: 'Reset user password'
      description: 'Access enabled to any role'
      operationId: resetUserPassword
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordMatch'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/auth/profile:
    get:
      tags:
        - 'profile'
      security:
        - BearerAuth: []
      summary: 'Get user profile content'
      description: 'Access enabled to Authenticated users [Any Role]'
      operationId: profileContent
      responses:
        '200':
          description: 'User profile content fetched successfuly!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags:
        - 'profile'
      security:
        - BearerAuth: []
      summary: 'Update user password'
      description: 'Access enabled to Authenticated users [Any Role]'
      operationId: updateUserPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateForm'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/admin:
    get:
      tags:
        - 'admin'
      security:
        - BearerAuth: []
      summary: 'Get list of users'
      description: 'Access enabled to role: Admin'
      operationId: getAllUsers
      parameters:
        - name: username
          in: query
          required: false
          description: 'Searches by email substring'
          schema:
            type: string
        - name: role
          in: query
          required: false
          description: 'Searches by role'
          schema:
            $ref: '#/components/schemas/EnumRole'
      responses:
        '200':
          description: 'List of users fetched successfuly!'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    patch:
      tags:
        - 'admin'
      security:
        - BearerAuth: []
      summary: 'Update user roles'
      description: 'Access enabled to role: Admin'
      operationId: updateUserRoles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRolesForm'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    ApiError:
      type: object
      required:
        - timestamp
        - message
      properties:
        timestamp:
          type: string
          format: date-time
        message:
          type: string
          example: 'username must be have email format'
        fieldErrors:
          type: array
          items:
            type: string
            example: 'username'
    AuthenticationError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Full authentication is required to access this resource'
    OkMessage:
      type: object
      required:
        - 'body'
      properties:
        body:
          type: string
          example: 'Success!'

    SignupForm:
      type: object
      required:
        - 'username'
        - 'password'
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
        role:
          $ref: '#/components/schemas/EnumRole'
    SigninForm:
      type: object
      required:
        - 'username'
        - 'password'
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
    Username:
      type: string
      format: email
      description: 'User e-mail for contact and to redefine lost password [UNIQUE]'
      example: 'example@example.com'
      minLength: 3
      maxLength: 50
    Password:
      type: string
      format: password
      description: 'User password to access account'
      example: '1234567890'
      minLength: 8
      maxLength: 120
    EnumRole:
      type: string
      enum:
        - 'ADMIN'
        - 'MANAGER'
        - 'USER'
      description: 'Client permissions. Must be hidden from Users'
    JWTResponse:
      type: object
      required:
        - 'token'
        - 'type'
      properties:
        token:
          type: string
        type:
          type: string
          default: 'Bearer'
    Profile:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
    UpdateUserRolesForm:
      type: object
      required:
        - 'username'
        - 'roles'
      properties:
        username:
          $ref: '#/components/schemas/Username'
        roles:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/EnumRole'
    UserId:
      type: string
      format: uuid
      example: 550e8400-e29b-41d4-a716-446655440000
    UserInfo:
      type: object
      required:
        - 'id'
        - 'username'
        - 'roles'
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        username:
          $ref: '#/components/schemas/Username'
        roles:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/EnumRole'
    PasswordUpdateForm:
      type: object
      required:
        - 'currentPassword'
        - 'newPasswordMatch'
      properties:
        currentPassword:
          $ref: '#/components/schemas/Password'
        newPasswordMatch:
          $ref: '#/components/schemas/PasswordMatch'
    PasswordMatch:
      type: object
      required:
        - 'password'
        - 'passwordConfirmation'
      properties:
        password:
          $ref: '#/components/schemas/Password'
        passwordConfirmation:
          $ref: '#/components/schemas/Password'

  responses:
    OK:
      description: 'Operation successfully finished!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OkMessage'
    Unauthorized:
      description: 'Operation failed: not authenticated'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'
    NotFound:
      description: 'Operation failed: could not find provided resource!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    BadRequest:
      description: 'Operation failed: bad provided resource!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Forbidden:
      description: 'Operation failed: no authorization'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'
  
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
      bearerFormat: JWT
