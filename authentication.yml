openapi: '3.0.3'
info:
  title: Authentication
  version: '1.1.x'
servers:
  - url: http://localhost:8000
    description: Production Environment
    
  - url: http://localhost:8080
    description: Development Environment
tags:
  - name: 'auth'
  - name: 'admin'
  - name: 'profile'
  - name: 'passwordResetToken'

paths:
  /api/auth/signup:
    post:
      tags:
        - 'auth'
      summary: 'Register new user'
      description: 'Check if there is an existing user and save a new one'
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupForm'
      responses:
        '201':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/signup/admin:
    post:
      tags:
        - 'auth'
      summary: 'Register new Admin'
      description: 'Check if there is an existing user and save a new one'
      operationId: signupAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupFormAdmin'
      responses:
        '201':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/signin:
    post:
      tags:
        - 'auth'
      summary: 'User login'
      description: 'Authenticate {username, password} and generate a JWT'
      operationId: signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninForm'
      responses:
        '200':
          description: 'Authenticated successfully!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/forgotpassword:
    post:
      tags:
        - 'passwordResetToken'
      summary: 'Send user an email with url/{token} to update his forgotten password'
      description: 'Access enabled to any role'
      operationId: emailPasswordResetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/Username'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    
  /api/auth/forgotpassword/{token}:  
    patch:
      tags:
        - 'passwordResetToken'
      summary: 'Reset user password'
      description: 'Access enabled to any role'
      operationId: resetUserPassword
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordMatch'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/auth/profile:
    patch:
      tags:
        - 'profile'
      security:
        - BearerAuth: []
      summary: 'Update user password'
      description: 'Access enabled to Authenticated users [any role]'
      operationId: updateUserPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateForm'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/admin:
    get:
      tags:
        - 'admin'
      security:
        - BearerAuth: []
      summary: 'Get list of users'
      description: 'Access enabled to role: Admin'
      operationId: getAllUsers
      parameters:
        - name: username
          in: query
          required: false
          description: 'Searches by email substring'
          schema:
            type: string
        - name: role
          in: query
          required: false
          description: 'Searches by role'
          schema:
            $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: 'List of users fetched successfully!'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    patch:
      tags:
        - 'admin'
      security:
        - BearerAuth: []
      summary: 'Update user roles'
      description: 'Access enabled to role: Admin'
      operationId: updateUserRoles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRolesForm'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/auth/admin/roles:
    post:
      tags:
        - 'admin'
      security:
        - BearerAuth: []
      summary: 'Register new Role'
      description: 'Check if there is an existing Role and save a new one'
      operationId: registerRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  $ref: '#/components/schemas/Role'
      responses:
        '201':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  
  /api/auth/admin/users:
    delete:
      tags:
        - 'admin'
      security:
        - BearerAuth: []
      summary: 'Delete User'
      description: 'Deletes user from admin panel'
      operationId: deleteUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: DeleteUserRequest
              properties:
                username:
                  $ref: '#/components/schemas/Username'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
          
components:
  schemas:
    ApiError:
      type: object
      required:
        - timestamp
        - message
      properties:
        timestamp:
          type: string
          format: date-time
        message:
          type: string
          example: 'username must be have email format'
        fieldErrors:
          type: array
          items:
            type: string
            example: 'username'
    AuthenticationError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Full authentication is required to access this resource'
    OkResponse:
      type: object
      required:
        - 'message'
      properties:
        message:
          type: string
          example: 'Success!'

    SignupForm:
      type: object
      required:
        - 'username'
        - 'password'
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/PasswordMatch'
    SignupFormAdmin:
      type: object
      required:
        - 'username'
        - 'password'
        - 'adminPassword'
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/PasswordMatch'
        adminPassword:
          $ref: '#/components/schemas/Password'
    SigninForm:
      type: object
      required:
        - 'username'
        - 'password'
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
    Username:
      type: string
      format: email
      description: 'User e-mail for contact and to redefine lost password [UNIQUE]'
      example: 'example@email.com'
      minLength: 3
      maxLength: 50
    Password:
      type: string
      format: password
      description: 'User password to access account'
      example: '@Password123'
      minLength: 8
      maxLength: 120
    Role:
      type: string
      minLength: 3
      maxLength: 40
      example: 'ADMIN'
      description: 'Client permissions'
    JWT:
      type: object
      required:
        - 'token'
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
    UpdateUserRolesForm:
      type: object
      required:
        - 'username'
        - 'roles'
      properties:
        username:
          $ref: '#/components/schemas/Username'
        roles:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/Role'
    UserId:
      type: integer
      format: int32
      example: 3
    UserInfo:
      type: object
      required:
        - 'id'
        - 'username'
        - 'roles'
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        username:
          $ref: '#/components/schemas/Username'
        roles:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Role'
    PasswordUpdateForm:
      type: object
      required:
        - 'currentPassword'
        - 'newPasswordMatch'
      properties:
        currentPassword:
          $ref: '#/components/schemas/Password'
        newPasswordMatch:
          $ref: '#/components/schemas/PasswordMatch'
    PasswordMatch:
      type: object
      required:
        - 'password'
        - 'passwordConfirmation'
      properties:
        password:
          $ref: '#/components/schemas/Password'
        passwordConfirmation:
          $ref: '#/components/schemas/Password'

  responses:
    OK:
      description: 'Operation successfully finished!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OkResponse'
    Unauthorized:
      description: 'Operation failed: Not Authenticated!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'
    NotFound:
      description: 'Operation failed: Could not find provided resource!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    BadRequest:
      description: 'Operation failed: Bad resources provided!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Forbidden:
      description: 'Operation failed: Not Authorized!'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'
  
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
      bearerFormat: JWT